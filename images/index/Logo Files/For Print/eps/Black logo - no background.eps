%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 500
%%HiResBoundingBox: 0 0 2371.9199 499.91998
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 499.91998 re
W
q
[0.24 0 0 -0.24 0 499.91998] cm
q
0 0 9883.333 2081.6887 re
W*
q
[23.228043 0 0 23.243891 95.228485 -3.556254] cm
79.735001 41.529999 m
78.255997 41.529999 l
78.259995 41.434998 78.268997 41.342999 78.268997 41.246998 c
78.268997 38.998997 77.042 37.042999 75.223 35.997997 c
74.983002 37.737999 74.696999 39.587997 74.375999 41.529999 c
72.160004 41.529999 l
76.368004 16.141998 73.033005 12.054998 68.219002 11.195999 c
67.755005 11.112999 67.292999 11.062999 66.834999 11.062999 c
62.329998 11.062999 58.02 15.861999 53.429001 41.529999 c
53.226002 41.529999 l
53.207001 39.992001 52.751003 38.559998 51.979 37.347 c
53.122002 31.415001 54.278 26.542999 55.505001 22.611 c
52.239002 22.700001 49.617001 25.368999 49.617001 28.657 c
48.232002 28.657 46.921001 28.955 45.733002 29.480999 c
44.916 27.105 42.666 25.393999 40.012001 25.393999 c
39.121002 25.393999 38.280003 25.591999 37.517002 25.936998 c
36.410004 24.728998 34.825001 23.965998 33.057003 23.965998 c
32.656002 23.965998 32.265003 24.007998 31.886003 24.080997 c
33.207005 25.363998 34.128002 27.052998 34.439003 28.934998 c
34.761002 30.884998 l
34.013 30.938999 33.296001 31.095999 32.617001 31.342999 c
32.278 29.291998 l
32.243999 29.091997 32.197998 28.895998 32.148998 28.703999 c
32.134998 28.647999 32.118999 28.593998 32.102997 28.538998 c
32.059998 28.392998 32.012997 28.248997 31.962997 28.106998 c
31.943998 28.058998 31.927998 28.010998 31.910997 27.963999 c
31.839998 27.782 31.761997 27.605 31.675997 27.431999 c
31.662996 27.407999 31.648996 27.384998 31.637997 27.359999 c
31.559998 27.211998 31.475996 27.064999 31.389997 26.922998 c
31.362997 26.878998 31.334997 26.834999 31.305998 26.791998 c
31.216997 26.654999 31.123999 26.522999 31.025997 26.393997 c
31.007998 26.370996 30.989998 26.344997 30.971996 26.320997 c
30.850996 26.167997 30.723997 26.019997 30.592997 25.878998 c
30.571997 25.856998 30.548996 25.834997 30.526997 25.812998 c
30.413996 25.693998 30.293997 25.580997 30.171997 25.471998 c
30.139997 25.443998 30.108997 25.414999 30.076998 25.387999 c
29.342999 24.756998 28.472998 24.287998 27.528997 24.029999 c
25.870998 14.016999 l
20.456999 14.912999 l
22.113998 24.925999 l
20.056999 26.320999 18.883999 28.825998 19.316998 31.438 c
20.986998 41.529999 l
18.767998 41.529999 l
17.945997 36.563999 l
17.889997 36.563 17.835997 36.551998 17.778997 36.551998 c
14.803997 36.551998 12.335998 38.699997 11.825997 41.529999 c
10.258997 41.529999 l
8.353997 41.529999 6.810997 43.245998 6.810997 45.362999 c
6.810997 47.479 8.352997 49.193001 10.258997 49.193001 c
11.695997 49.193001 l
17.493998 77.067001 l
17.866997 78.181999 18.912998 78.936005 20.089998 78.936005 c
69.903 78.936005 l
71.080002 78.936005 72.125 78.182007 72.499001 77.067001 c
78.294998 49.193001 l
79.733002 49.193001 l
81.637001 49.193001 83.181 47.479 83.181 45.362999 c
83.183998 43.245998 81.639999 41.529999 79.735001 41.529999 c
h
31.115 73.161003 m
30.969 73.181 30.823 73.187004 30.681 73.187004 c
28.907999 73.187004 27.372 71.865005 27.152 70.061005 c
25.062 52.909004 l
24.825001 50.959003 26.212 49.184006 28.163 48.946003 c
30.117001 48.707005 31.888 50.097004 32.125999 52.048004 c
34.217999 69.199005 l
34.455002 71.150002 33.064999 72.924004 31.115 73.161003 c
h
37.304001 41.529999 m
30.870001 41.529999 l
30.388 40.737999 30.104 39.813999 30.104 38.821999 c
30.104 35.938999 32.450001 33.593998 35.332001 33.593998 c
37.150002 33.593998 38.749001 34.528999 39.684002 35.940998 c
38.234001 37.368999 37.327999 39.344002 37.304001 41.529999 c
h
48.557999 69.630997 m
48.557999 71.594994 46.963997 73.187996 45 73.187996 c
43.034 73.187996 41.441002 71.594994 41.441002 69.630997 c
41.441002 52.479 l
41.441002 50.512001 43.034 48.918999 45 48.918999 c
46.964001 48.918999 48.557999 50.511997 48.557999 52.479 c
48.557999 69.630997 l
h
40.042 41.529999 m
40.086998 38.687 42.410999 36.386997 45.264 36.386997 c
48.118 36.386997 50.442001 38.686996 50.487 41.529999 c
40.042 41.529999 l
h
64.938004 52.909 m
62.844002 70.061005 l
62.623001 71.865005 61.09 73.187004 59.316002 73.187004 c
59.173 73.187004 59.029003 73.18 58.881001 73.161003 c
56.931 72.924004 55.542 71.149002 55.779999 69.199005 c
57.872997 52.047005 l
58.109997 50.098003 59.883999 48.705006 61.835999 48.946003 c
63.786999 49.185001 65.176003 50.959999 64.938004 52.909 c
h
68.107002 39.783001 m
67.792999 39.871002 67.348 39.971001 66.826004 40.033001 c
66.422005 40.084999 65.973007 40.111 65.498001 40.111 c
64.737999 40.111 63.91 40.043999 63.097 39.896 c
61.774002 39.66 60.488998 39.219002 59.550999 38.730999 c
59.081997 38.492001 58.697998 38.244999 58.434998 38.051998 c
58.168999 37.863998 58.022999 37.73 58.022999 37.73 c
58.022999 37.73 58.208 37.653999 58.521999 37.57 c
58.835999 37.481998 59.279999 37.383999 59.802998 37.32 c
60.208996 37.268002 60.659996 37.242001 61.139999 37.242001 c
61.897999 37.242001 62.722 37.309002 63.533001 37.452999 c
64.855003 37.688 66.141998 38.126999 67.081001 38.617001 c
67.550003 38.855999 67.931 39.102001 68.194 39.295002 c
68.459999 39.484001 68.606003 39.619003 68.606003 39.619003 c
68.606003 39.619003 68.420998 39.696999 68.107002 39.783001 c
h
69.196999 33.673 m
68.883995 33.763 68.438995 33.861 67.917 33.924 c
67.513 33.977001 67.063004 34.004002 66.587997 34.004002 c
65.826996 34.004002 65.000999 33.935001 64.186996 33.789001 c
62.863998 33.552002 61.578995 33.111 60.642998 32.622002 c
60.172997 32.383003 59.788998 32.137001 59.525997 31.944002 c
59.259998 31.757002 59.114998 31.622002 59.114998 31.622002 c
59.114998 31.622002 59.298996 31.546001 59.610996 31.461002 c
59.925995 31.373003 60.370995 31.274002 60.892998 31.212002 c
61.298996 31.160002 61.750999 31.133001 62.230999 31.133001 c
62.988998 31.133001 63.813999 31.200001 64.623001 31.345001 c
65.945999 31.580002 67.233002 32.018002 68.168999 32.507999 c
68.639999 32.746998 69.021996 32.993999 69.285995 33.187 c
69.549995 33.375 69.697998 33.511002 69.697998 33.511002 c
69.697998 33.511002 69.512001 33.589001 69.196999 33.673 c
h
70.288002 27.563999 m
69.974998 27.651999 69.528999 27.751999 69.006004 27.814999 c
68.604004 27.866999 68.154007 27.893999 67.678001 27.893999 c
66.917999 27.893999 66.091003 27.824999 65.278 27.677999 c
63.956001 27.441 62.668999 27 61.733002 26.513 c
61.262001 26.274 60.880001 26.027 60.616001 25.834 c
60.350002 25.646999 60.205002 25.511999 60.205002 25.511999 c
60.205002 25.511999 60.390003 25.435999 60.702003 25.351999 c
61.018005 25.262999 61.461002 25.164999 61.984005 25.102999 c
62.390003 25.050999 62.843006 25.023998 63.323006 25.023998 c
64.080009 25.023998 64.903008 25.090998 65.715004 25.235998 c
67.037003 25.469997 68.324005 25.907999 69.261002 26.397999 c
69.730003 26.637999 70.111 26.882999 70.375999 27.077 c
70.641998 27.265999 70.788002 27.400999 70.788002 27.400999 c
70.788002 27.400999 70.602997 27.479 70.288002 27.563999 c
h
70.977997 21.201 m
70.905998 21.228001 70.793999 21.287001 70.660995 21.326 c
70.389992 21.422001 70.008995 21.528 69.556999 21.609001 c
69.132996 21.686001 68.648003 21.726002 68.136002 21.726002 c
67.566002 21.726002 66.963005 21.676003 66.368004 21.569002 c
65.242004 21.367002 64.152 20.963001 63.363003 20.501001 c
62.969002 20.269001 62.646004 20.037001 62.426003 19.855001 c
62.312004 19.773001 62.228001 19.680002 62.169003 19.628002 c
62.111004 19.574001 62.080002 19.545002 62.080002 19.545002 c
62.080002 19.545002 62.120003 19.527002 62.193001 19.496002 c
62.264 19.469002 62.375999 19.411003 62.510002 19.372002 c
62.781002 19.276001 63.163002 19.172001 63.614002 19.091002 c
64.042 19.014002 64.529999 18.974001 65.047005 18.974001 c
65.613007 18.974001 66.214005 19.023001 66.804001 19.127001 c
67.93 19.327002 69.021004 19.730001 69.807999 20.193001 c
70.204002 20.424002 70.526001 20.656 70.746002 20.84 c
70.860001 20.923 70.942001 21.017 71.000999 21.068001 c
71.059998 21.123001 71.090996 21.152 71.090996 21.152 c
71.090996 21.152 71.053001 21.169001 70.977997 21.201 c
h
f
Q
q
[45.8307 0 0 45.861973 2518.9851 -159.730118] cm
24.823999 11.777 m
15.5467 26.484001 l
15.5467 40 l
9.667799 40 l
9.667799 26.621 l
0.331899 11.777 l
6.816299 11.777 l
12.577999 21.3864 l
18.359299 11.777 l
24.824099 11.777 l
24.823999 11.777 l
h
39.23872 40.390629 m
33.047321 40.390629 28.20372 37.226528 28.20372 30.11763 c
28.20372 11.77763 l
34.063118 11.77763 l
34.063118 29.316629 l
34.063118 33.613529 36.34832 35.215031 39.238918 35.215031 c
42.149117 35.215031 44.45372 33.593929 44.45372 29.316631 c
44.45372 11.777632 l
50.313118 11.777632 l
50.313118 30.117632 l
50.313118 37.227032 45.449818 40.390633 39.239117 40.390633 c
39.23872 40.390629 l
h
89.374908 40 m
83.53511 40 l
81.679611 18.73 l
74.531212 40 l
70.742111 40 l
63.593712 18.73 l
61.718712 40 l
55.859314 40 l
58.222614 11.777 l
66.582016 11.777 l
72.597618 29.492001 l
78.691422 11.777 l
87.050819 11.777 l
89.374908 40 l
h
127.851471 40 m
122.011673 40 l
120.156174 18.73 l
113.007774 40 l
109.218674 40 l
102.070274 18.73 l
100.195274 40 l
94.335876 40 l
96.699173 11.777 l
105.058571 11.777 l
111.074173 29.492001 l
117.167976 11.777 l
125.527374 11.777 l
127.851471 40 l
h
155.156036 11.777 m
145.878738 26.484001 l
145.878738 40 l
139.999832 40 l
139.999832 26.621 l
130.663925 11.777 l
137.148331 11.777 l
142.910034 21.3864 l
148.69133 11.777 l
155.156128 11.777 l
155.156036 11.777 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
